[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <Space>f :<C-u>NERDTreeFind<CR>

  let g:NERDTreeQuitOnOpen=0
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']
hook_add = '''
  let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "*",
      \ "Staged"    : "+",
      \ "Untracked" : "-",
      \ "Renamed"   : ">",
      \ "Unmerged"  : "=",
      \ "Deleted"   : "!",
      \ "Dirty"     : "x",
      \ "Clean"     : ":",
      \ 'Ignored'   : 'I',
      \ "Unknown"   : "?"
      \ }
'''

[[plugins]]
repo = 'EvanDotPro/nerdtree-chmod'
depends = ['nerdtree']

[[plugins]]
repo = 'tiagofumo/vim-nerdtree-syntax-highlight'
depends = ['nerdtree']
hook_add = '''
  let g:NERDTreeFileExtensionHighlightFullName = 1
  let g:NERDTreeExactMatchHighlightFullName = 1
  let g:NERDTreePatternMatchHighlightFullName = 1
'''

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  nnoremap <silent> <C-i> :<C-u>CtrlPBuffer<CR>
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
depends = ['ctrlp.vim']
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-n> <Plug>(yankround-next)

  let g:ctrlp_map = ''
  nnoremap <silent><SID>(ctrlp) :<C-u>CtrlP<CR>
  nmap <expr><C-p> yankround#is_active() ? "\<Plug>(yankround-prev)" : "<SID>(ctrlp)"
'''

[[plugins]]
repo = 'thinca/vim-unite-history'
on_source = 'unite.vim'

[[plugins]]
repo = 'osyo-manga/unite-filetype'

[[plugins]]
repo = 'Shougo/unite-help'
on_source = 'unite.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_post_source = 'source ~/.vim/rc/plugins/lightline.rc.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_post_source = '''
  call lexima#add_rule({'char': '<', 'input_after': '>'})
  call lexima#add_rule({'char': '>', 'at': '\%#>', 'leave': 1})
  call lexima#add_rule({'char': '<BS>', 'at': '<\%#>', 'delete': 1})
  call lexima#add_rule({'char': '<CR>', 'at': '<\%#>', 'input': '<CR><TAB>', 'input_after': '<CR>'})
  call lexima#add_rule({'char': '<CR>', 'at': '<\%#$', 'input_after': '<CR>)', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1>'})

  call lexima#add_rule({'char': '<CR>', 'at': '```.*\%#```', 'input_after': '<CR>', 'except': '\C\v^(\s*)\S.*%#\n%(%(\s*|\1\s.+)\n)*\1>'})
'''

[[plugins]]
repo = 'vim-scripts/Align'
hook_add ='''
  let g:Align_xstrlen = 3
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_setConceal = 0
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
  autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
  function! s:template_keywords()
    silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
    silent! %s/<+FILENAME+>/\=expand('%:r')/g
  endfunction

  autocmd MyAutoCmd User plugin-template-loaded
        \   if search('<+CURSOR+>')
        \ |   silent! execute 'normal! "_da>'
        \ | endif
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  source ~/.vim/rc/plugins/quickrun.rc.vim
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  command! Gac Gw|Gcommit
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  " let g:gitgutter_sign_added = '+'
  " let g:gitgutter_sign_modified = '>'
  " let g:gitgutter_sign_removed = '-'
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nnoremap <silent> <Space>2 :<C-u>TagbarToggle<CR>
  let g:tagbar_autofocus = 1
  let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
          \ 'p:package',
          \ 'i:imports:1',
          \ 'c:constants',
          \ 'v:variables',
          \ 't:types',
          \ 'n:interfaces',
          \ 'w:fields',
          \ 'e:embedded',
          \ 'm:methods',
          \ 'r:constructor',
          \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
          \ 't' : 'ctype',
          \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
          \ 'ctype' : 't',
          \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
  \ }
'''

# [[plugins]]
# repo = 'soramugi/auto-ctags.vim'
# hook_add = '''
#   let g:auto_ctags = 1
#   let g:auto_ctags_tags_args = '--tag-relative --recurse'
#   let g:auto_ctags_directory_list = ['.git', '.svn', '$HOME/.ctags.d']
#   let g:auto_ctags_filetype_mode = 1
#   set tags+=.git/tags
#   set tags+=.svn/tags
#   set tags+=$HOME/.ctags.d/tags
# '''

[[plugins]]
repo = 'Shougo/vinarise'

[[plugins]]
repo = 'junegunn/vader.vim'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  nnoremap <silent> <C-s> :<C-u>Ack!<Space>

  let g:ackprg = 'ag --nogroup --nocolor --column'
  let g:ack_autoclose = 1
'''

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'bfredl/nvim-miniyank'
if = "has('nvim')"
hook_add = '''
  map p <Plug>(miniyank-autoput)
  map P <Plug>(miniyank-autoPut)
  map <C-n> <Plug>(miniyank-cycle)
'''

 [[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  nmap s <Plug>(easymotion-overwin-f2)

  map <Space>L <Plug>(easymotion-bd-jk)
  nmap <Space>L <Plug>(easymotion-overwin-line)

  map  / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)

  let g:EasyMotion_smartcase = 1

  let g:EasyMotion_use_smartsign_us = 1
'''
