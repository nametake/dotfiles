# Unite {{{
[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim']
hook_add = '''
  source ~/.vim/rc/plugins/unite.rc.vim
'''

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_event = ['BufEnter']

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['unite.vim']

#}}}

# Auto complete {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_i = 1
hook_add = '''
  source ~/.vim/rc/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
  source ~/.vim/rc/plugins/neosnippet.rc.vim
'''
#}}}

[[plugins]]
repo = 'Konfekt/FastFold'
on_event = ['BufEnter']
hook_post_source = 'FastFoldUpdate'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
on_event = ['BufEnter']
hook_add = '''
  nnoremap <silent> <Space>s :PreciousSwitch<CR>
  nnoremap <silent> <Space>p :PreciousReset<CR>
  let g:precious_enable_switch_CursorMoved = {
  \   "*" : 0
  \ }
  let g:precious_enable_switch_CursorMoved_i = {
  \   "*" : 0
  \ }

  augroup test
    autocmd!
    autocmd InsertEnter * :PreciousSwitch
  augroup END
'''

[[plugins]]
repo = 'w0rp/ale'
on_event = ['BufEnter']
hook_add = '''
  source ~/.vim/rc/plugins/ale.rc.vim
'''

[[plugins]]
repo = 'sbdchd/neoformat'
on_event = ['BufEnter']
build = 'npm install -g js-beautify prettier-eslint-cli'
hook_add = '''
  source ~/.vim/rc/plugins/neoformat.rc.vim
'''

# Filetype {{{

# Golang {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
  nnoremap <silent> <Space>gd :<C-u>GoDoc<CR>
  nnoremap <silent> <Space>t :<C-u>GoTest<CR>
  autocmd MyAutoCmd FileType go set omnifunc=gocomplete#Complete
  " autocmd MyAutoCmd BufWritePre *.go GoImports

  let g:go_highlight_array_whitespace_error = 1
  let g:go_highlight_chan_whitespace_error = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_space_tab_error = 1
  let g:go_highlight_trailing_whitespace_error = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_functions = 1
  let g:go_highlight_function_arguments = 0
  let g:go_highlight_function_calls = 1
  let g:go_highlight_types = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_generate_tags = 1
  let g:go_highlight_string_spellcheck = 1
  let g:go_highlight_format_strings = 1
  let g:go_highlight_variable_declarations = 1
  let g:go_highlight_variable_assignments = 1

  let g:go_def_mode = "godef"

  let g:go_fmt_experimental = 1
  let g:go_fmt_fail_silently = 1
  let g:go_fmt_autosave = 0
  let g:go_fmt_command = "goimports"

  let g:go_term_enabled = 1
  let g:go_term_mode = "split"
  let g:go_term_height = 10
  let g:go_term_width = 10

  let g:go_gocode_unimported_packages = 1
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
build = 'make'
hook_add = '''
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['var', 'package', 'func', 'type', 'const']
  let g:deoplete#sources#go#package_dot = 0
'''

[[plugins]]
repo = 'jstemmer/gotags'
on_ft = ['go']

[[plugins]]
repo = 'rhysd/unite-go-import.vim'
depends = ['unite.vim']
on_ft = ['go']
hook_add = '''
  nnoremap gi :<C-u>Unite go/import<CR>
'''
hook_source = '''
  call unite#custom#source('go/import', 'ignore_pattern', '.*/vendor/.*')
'''

[[plugins]]
repo = 'buoto/gotests-vim''
on_ft = ['go']
#}}}

# Markdown {{{
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add ='''
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_new_list_item_indent = 2
'''

[[plugins]]
repo = 'moorereason/vim-markdownfmt'
on_ft = ['markdown']
hook_add = '''
  let g:markdownfmt_autosave = 1
  let g:markdownfmt_command = 'mdfmt'
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add ='''
  let g:markdown_fold_style = 'nested'
  let g:table_mode_always_active = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown']
hook_add ='''
  let g:previm_show_header = 0
'''
#}}}

# JavaScript {{{
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'jsx']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'jsx']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'jsx']

[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'jsx']

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['javascript', 'jsx']

[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['javascript', 'jsx', 'typescript']

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = ['javascript']
build = 'npm install -g tern'
hook_add = '''
  let g:deoplete#sources#ternjs#types = 1
  let g:deoplete#sources#ternjs#case_insensitive = 1
  let g:deoplete#sources#ternjs#filter = 0
  let g:deoplete#sources#ternjs#omit_object_prototype = 0
  let g:deoplete#sources#ternjs#include_keywords = 1
'''
#}}}

# TypeScript {{{
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']
hook_add = '''
  autocmd FileType typescript setlocal completeopt-=menu
'''

[[plugins]]
repo = 'Quramy/tsuquyomi'
on_ft = ['typescript']

[[plugins]]
repo = 'mhartington/nvim-typescript'
on_ft = ['typescript']
build = './install.sh'
hook_add = '''
  let g:nvim_typescript#default_signs = [
      \    {
      \    'TSerror': {
      \     'texthl': 'SpellBad',
      \     'signText': '.',
      \     'signTexthl': 'NeomakeErrorSign'
      \    }
      \   },
      \   {
      \     'TSwarning': {
      \      'texthl': 'SpellBad',
      \      'signText': '.',
      \      'signTexthl': 'NeomakeWarningSign'
      \     }
      \   },
      \   {
      \     'TSinformation': {
      \      'texthl': 'SpellBad',
      \      'signText': '.',
      \      'signTexthl': 'NeomakeInfoSign'
      \      }
      \   },
      \   {
      \     'TShint': {
      \      'texthl': 'SpellBad',
      \      'signText': '?',
      \      'signTexthl': 'NeomakeInfoSign'
      \      }
      \   }
      \ ]
'''
# }}}

# HTML/CSS {{{
[[plugins]]
repo = 'vim-scripts/html-improved-indentation'
on_ft = ['html', 'css']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css']
#}}}

# json {{{
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''
#}}}

# TOML {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
#}}}

# Protobuf {{{
[[plugins]]
repo = 'uber/prototool'
on_ft = ['proto']
rtp = 'vim/prototool'
hook_add = '''
  autocmd VimEnter *.proto call PrototoolFormatEnable()
'''
#}}}

# clang {{{
[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp']
#}}}

# fish {{{
[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']
#}}}

# Dockerfile {{{
[[plugins]]
repo = 'ekalinin/Dockerfile.vim'
on_ft = ['dockerfile']
#}}}

# tmux {{{
[[plugins]]
repo = 'keith/tmux.vim'
#}}}

#}}}
