snippet testMethod
/**
 * ${2}
 */
@isTest
static void ${1} () {
	${3}
}
endsnippet

snippet head "Class/Trigger header"
/**
 *	@author `!v g:snips_author`
 *	@date `!v strftime("%Y-%m-%d %X")` 
 *	@description
 *	    ${1}
 *	
 *	Version History :   
 *		
 */
endsnippet

snippet dbg "System.debug('...');"
System.debug(${1});
endsnippet

snippet ass
System.assert(${1}, '${2}');
endsnippet

snippet asse
System.assertEquals(${1}, ${2}, '${3}');
endsnippet

snippet assne
System.assertNotEquals(${1}, ${2}, '${3}');
endsnippet

snippet list
final List<${1}> ${2} = new List<$1>();
endsnippet

snippet set
final Set<${1}> ${2} = new Set<$1>();
endsnippet

snippet map 
final Map<${1}, ${2}> ${3} = new Map<$1, $2>();
endsnippet

snippet class "generic class"
public ${1:with} sharing class ${2:`!p snip.rv=snip.basename`} {
}
endsnippet

snippet class "extension class with Standard Controller"
public with sharing class ${1:`!p snip.rv=snip.basename`} {
	private final ApexPages.StandardController $2;

	public $1 (ApexPages.StandardController ${2:stdCon}) {
		this.$2 = $2;
	}
}
endsnippet

snippet class "@isTest class"
/**
 *	@author `!v g:snips_author`
 *	@date `!v strftime("%Y-%m-%d %X")` 
 *	@description
 *	    Test methods for ${2:`!p snip.rv=snip.basename[:-4]`}
 *	
 *	Version History :   
 *		
 */
@isTest(isParallel=true)
public class ${1:`!p snip.rv=snip.basename`}  {
	/**
	 * ${4}
	 */
	@isTest
	static void test${3} () {
	}
}
endsnippet

snippet ver "@version - new change in apex file"
${1:`!v strftime("%Y-%m-%d")`} - ${2:feature-id} - ${3:initials}
	${4}
endsnippet

snippet for "Apex For cycle"
for(${1:ObjectType} ${2:varName} : ${3:Trigger.new}) {
    ${4}
}
endsnippet
